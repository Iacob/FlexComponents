<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 creationComplete="initComponent()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[Style(name="backgroundTextColor", format="Color", inherit="no", type="uint")]
		[Style(name="textInputBackgroundAlpha", format="Number", inherit="no", type="Number")]
		[Style(name="borderVisible", format="Boolean", inherit="no", type="Boolean")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			
			[Bindable]
			public var shadowText:String = "请输入";
			
			[Bindable]
			public var displayAsPassword:Boolean = false;
			
			private var _shadowMode:Boolean = true;
			
			private var _initialText:String;
			
			/**
			 * The viewActivate method of the main frame might be called after this component created 
			 * and before creationComplete of this component called. So we use this variable.
			 * This variable will be set to true in the creationComplete method. 
			 */
			private var _initialized:Boolean = false;
			
			public function get text():String {
				return textField.text;
			}
			
			public function set text(value:String):void {
				
				if (_initialized) {
					// Set shadow mode.
					shadowMode = ((value == null) || ("" == value))?true:false;
					
					textField.text = value;
				}else {
					// If user call this method before this component is created,
					// save the text to a temporal local variable and set it to text field
					// in creationComplete method.
					_initialText = value;
				}
			}
			
			public function set shadowMode(value:Boolean):void {
				if (value) {
					// Set shadow mode to true.
					shadowTextLabel.text = shadowText;
					shadowTextLabel.visible = true;
					textField.displayAsPassword = false;
					_shadowMode = true;
				}else {
					// Set shadow mode to false.
					if (_shadowMode) {
						textField.text = "";
						shadowTextLabel.visible = false;
						textField.displayAsPassword = displayAsPassword;
						_shadowMode = false;
					}else {
						// If shadow mode is already set to false, do nothing.
					}
				}
			}
			
			public function get shadowMode():Boolean {
				return _shadowMode;
			}
			
			override public function styleChanged(styleProp:String):void {
				
				super.styleChanged(styleProp);
				
				// If all style properties updated, the styleProp parameter is null.
				if (styleProp == null) {
					
					
				}
				
//				if (("textAlign" == styleProp) || ("text-align" == styleProp)) {
//					
//					shadowTextLabel.setStyle(styleProp, this.getStyle(styleProp));
//					textField.setStyle(styleProp, this.getStyle(styleProp));
//					
//				}else if ("backgroundTextColor" == styleProp) {
//					
//					shadowTextLabel.setStyle("color", this.getStyle("backgroundTextColor"));
//					
//				}else if ("foregroundAlpha" == styleProp) {
//					
//					textField.setStyle("alpha", this.getStyle("foregroundAlpha"));
//					
//				}
			}
			
			private function initComponent():void {
				
				textField.addEventListener(FocusEvent.FOCUS_IN, gainFocusAction);
				textField.addEventListener(FocusEvent.FOCUS_OUT, loseFocusAction);
				this.shadowMode = true;
				
				this._initialized = true;
				
				this.text = _initialText;
				
				// Set component styles.
				shadowTextLabel.setStyle("textAlign", this.getStyle("textAlign"));
				textField.setStyle("textAlign", this.getStyle("textAlign"));
				
				shadowTextLabel.setStyle("color", this.getStyle("backgroundTextColor"));
				
				textField.setStyle("contentBackgroundAlpha", this.getStyle("textInputBackgroundAlpha"));
				textField.setStyle("borderVisible", this.getStyle("borderVisible"));
			}
			
			private function gainFocusAction(event:FocusEvent):void {
				shadowMode = false;
			}
			
			private function loseFocusAction(event:FocusEvent):void {
				if ((this.text == null) || (this.text == "")) {
					shadowMode = true;
				}
			}
		]]>
	</fx:Script>
	
	<s:Label id="shadowTextLabel" text="{shadowText}" backgroundAlpha="0" width="100%" height="100%" verticalAlign="middle" />
	
	<s:TextInput id="textField" width="100%" height="100%" alpha=".5" />
	
</s:SkinnableContainer>
